import{_ as n,o as s,c as a,b as t}from"./app.977a95f9.js";const e={},o=t(`<h1 id="mediaquery" tabindex="-1"><a class="header-anchor" href="#mediaquery" aria-hidden="true">#</a> MediaQuery</h1><h2 id="parameter" tabindex="-1"><a class="header-anchor" href="#parameter" aria-hidden="true">#</a> parameter</h2><p><code>useMedia(value, type) =&gt; vue.Ref&lt;boolean&gt;</code></p><p><code>value</code> Accept a number <strong>(Can accept a ref dynamic monitoring)</strong> of 768 by default, that is, the boundary value determined by media query</p><p><code>type</code> Only one string type <strong>(Can accept a ref dynamic monitoring)</strong> <code>max</code> or <code>min</code> Value Default <code>max</code>, That is, the media query type, <code>max</code> (Browser width smaller than <code>value</code> returns true) or <code>min</code> (Browser width greater than <code>value</code> returns true)</p><p><code>vue.Ref&lt;boolean&gt;</code> Returns a <code>ref (boolean)</code> valueï¼ŒThat is, whether the query criteria are met</p><h2 id="use" tabindex="-1"><a class="header-anchor" href="#use" aria-hidden="true">#</a> use</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span> setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useMedia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;use-aid&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> valuetest <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">768</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> typetest <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;max&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isMedia <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">useMedia</span><span class="token punctuation">(</span>valuetest<span class="token punctuation">,</span> typetest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button <span class="token decorator"><span class="token at operator">@</span><span class="token function">click</span></span><span class="token operator">=</span><span class="token string">&quot;typetest = &#39;max&#39;;&quot;</span><span class="token operator">&gt;</span>
        change max
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button <span class="token decorator"><span class="token at operator">@</span><span class="token function">click</span></span><span class="token operator">=</span><span class="token string">&quot;typetest = &#39;min&#39;;&quot;</span><span class="token operator">&gt;</span>
        change min
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;valuetest&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;768&quot;</span><span class="token operator">&gt;</span>
            <span class="token number">768</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;920&quot;</span><span class="token operator">&gt;</span>
            <span class="token number">920</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;1024&quot;</span><span class="token operator">&gt;</span>
            <span class="token number">1024</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">(</span>isMedia <span class="token operator">?</span> <span class="token string">&#39;be in&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Not in&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>typetest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>valuetest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),p=[o];function r(c,l){return s(),a("div",null,p)}const u=n(e,[["render",r],["__file","mediaquery.html.vue"]]);export{u as default};
