import{_ as n,o as a,c as s,b as e}from"./app.4c0b9491.js";const t={},o=e(`<h1 id="mediaquery" tabindex="-1"><a class="header-anchor" href="#mediaquery" aria-hidden="true">#</a> MediaQuery</h1><h2 id="parameter" tabindex="-1"><a class="header-anchor" href="#parameter" aria-hidden="true">#</a> parameter</h2><p><code>useMedia(value, type) =&gt; vue.Ref&lt;boolean&gt;</code></p><p><code>value</code> Accept a number of 768 by default, that is, the boundary value determined by media query</p><p><code>type</code> Only one string type <code>max</code> or <code>min</code> Value Default <code>max</code>, That is, the media query type, <code>max</code> (Browser width smaller than <code>value</code> returns true) or <code>min</code> (Browser width greater than <code>value</code> returns true)</p><p><code>vue.Ref&lt;boolean&gt;</code> Returns a <code>ref (boolean)</code> valueï¼ŒThat is, whether the query criteria are met</p><h2 id="use" tabindex="-1"><a class="header-anchor" href="#use" aria-hidden="true">#</a> use</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useMedia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;use-aid&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isMedia <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">useMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// or</span>
<span class="token keyword">const</span> isMedia <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">useMedia</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">&#39;max&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// or</span>
<span class="token keyword">const</span> isMedia <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">useMedia</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">&#39;min&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),c=[o];function p(i,r){return a(),s("div",null,c)}const d=n(t,[["render",p],["__file","mediaquery.html.vue"]]);export{d as default};
